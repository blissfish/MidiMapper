import javax.sound.midi.*;
import java.io.File;

public class Test {
    public static final int NOTE_ON = 0x90;
    public static final int NOTE_OFF = 0x80;
    public static final int MM_TRACK_NAME = 0x03;
    public static final String[] NOTE_NAMES = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};

    public static final DrumMapper mapper = new DrumMapper();


    public static void main(String[] args) throws Exception {

        try {
            String in = "Superior Libraries_N.Y - Avatar_Sticks_Straight 4_4_Song 02 91 BPM_Specials_Variation 12.mid";
            String out = "out-" + System.currentTimeMillis() + ".mid";
            System.out.println("Mapping " + in + " => " + out);

            Sequence sequence = MidiSystem.getSequence(new File("in/" + in));
            //Sequence sequence = MidiSystem.getSequence(new File("midifile2.mid"));

            int trackNumber = 0;
            for (Track track : sequence.getTracks()) {
                trackNumber++;
                System.out.println("Track " + trackNumber + ": size = " + track.size());
                System.out.println();
                for (int i = 0; i < track.size(); i++) {
                    MidiEvent event = track.get(i);
                    System.out.print("@" + event.getTick() + " ");
                    MidiMessage message = event.getMessage();
                    if (message instanceof MetaMessage) {
                        MetaMessage mm = (MetaMessage) message;
                        printMetaMessage(mm);
                        if (mm.getType() == MM_TRACK_NAME) {
                            changeTrackName(mm);
                            printMetaMessage(mm);
                        }

                        System.out.println();
                    } else if (message instanceof ShortMessage) {
                        ShortMessage sm = (ShortMessage) message;
                        System.out.print("Channel: " + sm.getChannel() + " ");
                        int command = sm.getCommand();
                        if (command == NOTE_ON) {
                            map(sm, "NOTE_ON");
                        } else if (sm.getCommand() == NOTE_OFF) {
                            map(sm, "NOTE_OFF");
                        } else {
                            System.out.println("Command:" + command);
                        }
                    } else {
                        System.out.println("Other message: " + message.getClass());
                    }
                }
                System.out.println();
            }

            File f = new File("output/" + out);
            if (!f.exists()) {
                f.createNewFile();
            }
            MidiSystem.write(sequence, 1, f);

        } catch (Exception e) {
            System.err.println(e);
        }
    }

    private static void printMetaMessage(MetaMessage message) throws InvalidMidiDataException {
        System.out.print("Status: " + message.getStatus() + " Type: " + message.getType() + " Length: " + message.getLength() + " Data: [" + new String(message.getData()) + "]");
    }

    private static void changeTrackName(MetaMessage message) throws InvalidMidiDataException {
        byte[] data = message.getData();
        String trackName = new String(data);
        trackName += " - generated by MidiMapper";
        message.setMessage(MM_TRACK_NAME, trackName.getBytes(), trackName.length());
    }

    private static void map(ShortMessage sm, String command) throws InvalidMidiDataException {
        printMessage(sm, command);
        Integer origValue = sm.getData1();
        Integer mappedValue = DrumMapper.map(origValue);
        if (mappedValue != null) {
            sm.setMessage(sm.getCommand(), sm.getChannel(), mappedValue, sm.getData2());
            //printMessage(sm, command);
        }
        System.out.println();
    }

    private static void printMessage(ShortMessage sm, String command) {
        int key = sm.getData1();
        int octave = (key / 12) - 1;
        int note = key % 12;
        String noteName = NOTE_NAMES[note] + octave;
        int velocity = sm.getData2();
        System.out.print("Command: " + command + " " + noteName + " key=" + key + " velocity: " + velocity);
    }


}